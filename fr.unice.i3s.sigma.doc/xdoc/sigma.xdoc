document[Sigma Documentation]

authors[Filip KÅ™ikava and Philippe Collet]

codelanguage-def[Scala]
[
  abstract, case, catch, class, do, def, else, extends, false, final, finally, for, forSome, if, import,
  implicit, lazy, match, new, null, object, override, package, private, protected, requires,
  return, sealed, super, this, trait, throw, try, true, type, val, var, while, with, yield
]

codelanguage-def[Java]
[
  abstract,continue,for,new,switch,assert,default,goto,package,synchronized,
  boolean,do,if,private,this,break,double,implements,protected,throw,
  byte,else,import,public,throws,
  case,enum,instanceof,return,transient,
  catch,extends,int,short,try,
  char,final,interface,static,void,
  class,finally,long,strictfp,volatile,
  const,float,native,super,while,null,true,false
]

chapter[Introduction]

Sigma is a framework that allows enriching EMF models using JVM based languages.
In the distribution there is a special support for link[http://www.scala-lang.org/][Scala] that leverage its features to write elegant and concise expressions together with an extended support for capturing structural constraints.

Currently, it is in an internal process to open source it and make it available to the community.
For more information, please contact Filip Krikava (filip dot krikava at i3s dot unice dot fr)



chapter[Reference Documentation]

section-ref[overview]