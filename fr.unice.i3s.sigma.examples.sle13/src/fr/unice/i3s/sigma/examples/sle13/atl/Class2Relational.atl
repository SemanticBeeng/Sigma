-- @path UML=/fr.unice.i3s.sigma.examples.sle13/model/SimpleUML.ecore
-- @path Relational=/fr.unice.i3s.sigma.examples.sle13/model/Relational.ecore

module Class2Relational;
create OUT : Relational from IN : UML;

rule Class2Table {
	from
		cls : UML!Class
	to
		tab : Relational!Table (
			name <- cls.name,
			columns <- Set{pkey}->union(cls.properties)
		),
		pkey : Relational!Column (
			name <- 'Id',
			dataType <- 'INT'
		)
}

--rule EAttribute2Column {
--	from
--		a : Ecore!EAttribute 
--		-- handle multiplicity
--	to
--		c : DB!Column (
--			name <- a.name,
--			dataType <- a.eAttributeType.name
--		)
--}


--
----rule DataType2Type {
----	from
----		dt : Class!DataType
----	to
----		out : Relational!Type (
----			name <- dt.name
----		)
----}
--
--rule DataTypeAttribute2Column {
--	from
--		a : Class!Attribute (
--			a.type.oclIsKindOf(Class!DataType) and not a.multiValued
--		)
--	to
--		out : Relational!Column (
--			name <- a.name,
--			type <- a.type
---- explicit use of implicit tracking links (first expected syntax, then present actual syntax)
----			owner <- [Class2Type.key]a.owner
----			owner <- thisModule.resolveTemp(a.owner, 'key')
--		)
--}
--
----rule MultiValuedDataTypeAttribute2Column {
----	from
----		a : Class!Attribute (
----			a.type.oclIsKindOf(Class!DataType) and a.multiValued
----		)
----	to
----		out : Relational!Table (
----			name <- a.owner.name + '_' + a.name,
----			col <- Sequence {id, value}
----		),
----		id : Relational!Column (
----			name <- a.owner.name.firstToLower() + 'Id',
----			type <- thisModule.objectIdType
----		),
----		value : Relational!Column (
----			name <- a.name,
----			type <- a.type
----		)
----}
--
--rule ClassAttribute2Column {
--	from
--		a : Class!Attribute (
--			a.type.oclIsKindOf(Class!Class) and not a.multiValued
--		)
--	to
--		foreignKey : Relational!Column (
--			name <- a.name + 'Id',
--			type <- thisModule.objectIdType
--		)
--}
--
----rule MultiValuedClassAttribute2Column {
----	from
----		a : Class!Attribute (
----			a.type.oclIsKindOf(Class!Class) and a.multiValued
----		)
----	to
----		t : Relational!Table (
----			name <- a.owner.name + '_' + a.name,
----			col <- Sequence {id, foreignKey}
----		),
----		id : Relational!Column (
----			name <- a.owner.name.firstToLower() + 'Id',
----			type <- thisModule.objectIdType
----		),
----		foreignKey : Relational!Column (
----			name <- a.name + 'Id',
----			type <- thisModule.objectIdType
----		)
----}
--
